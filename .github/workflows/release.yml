name: Release and Build

on:
  push:
    branches:
      - main

jobs:
  check-version-change:
    runs-on: ubuntu-latest
    outputs:
      version_changed: ${{ steps.check.outputs.version_changed }}
      new_version: ${{ steps.check.outputs.new_version }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2
      - name: Check Version Change
        id: check
        run: |
          git diff HEAD^ HEAD --name-only | grep -q '^package.json$' || exit 0
          old_version=$(git show HEAD^:package.json | jq -r '.version')
          new_version=$(jq -r '.version' package.json)
          if [ "$old_version" != "$new_version" ] && [ $(git diff HEAD^ HEAD --name-only | wc -l) -eq 1 ]; then
            echo "version_changed=true" >> $GITHUB_OUTPUT
            echo "new_version=$new_version" >> $GITHUB_OUTPUT
          else
            echo "version_changed=false" >> $GITHUB_OUTPUT
          fi

  create-release:
    needs: check-version-change
    if: needs.check-version-change.outputs.version_changed == 'true'
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v3
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          tag_name: v${{ needs.check-version-change.outputs.new_version }}
          release_name: v${{ needs.check-version-change.outputs.new_version }}
          draft: false
          prerelease: false

  build:
    needs: [check-version-change, create-release]
    if: needs.check-version-change.outputs.version_changed == 'true'
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: "22"
      - name: Install Dependencies
        run: yarn install
      - name: Build for ${{ matrix.os }}
        run: |
          if [ "${{ matrix.os }}" == "macos-latest" ]; then
            yarn build:mac
          elif [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
            yarn build:linux
          elif [ "${{ matrix.os }}" == "windows-latest" ]; then
            yarn build:win64
          fi
        shell: bash
      - name: Get Asset details
        id: get_asset
        run: |
          if [ "${{ matrix.os }}" == "macos-latest" ]; then
            echo "asset_name=Wora [v${{ needs.check-version-change.outputs.new_version }}].dmg" >> $GITHUB_OUTPUT
            echo "asset_path=./dist/Wora [v${{ needs.check-version-change.outputs.new_version }}].dmg" >> $GITHUB_OUTPUT
            echo "content_type=application/x-apple-diskimage" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
            echo "asset_name=Wora [v${{ needs.check-version-change.outputs.new_version }}].deb" >> $GITHUB_OUTPUT
            echo "asset_path=./dist/Wora [v${{ needs.check-version-change.outputs.new_version }}].deb" >> $GITHUB_OUTPUT
            echo "content_type=application/x-executable" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.os }}" == "windows-latest" ]; then
            echo "asset_name=Wora [v${{ needs.check-version-change.outputs.new_version }}].exe" >> $GITHUB_OUTPUT
            echo "asset_path=./dist/Wora [v${{ needs.check-version-change.outputs.new_version }}].exe" >> $GITHUB_OUTPUT
            echo "content_type=application/vnd.microsoft.portable-executable" >> $GITHUB_OUTPUT
          fi
        shell: bash
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ steps.get_asset.outputs.asset_path }}
          asset_name: ${{ steps.get_asset.outputs.asset_name }}
          asset_content_type: ${{ steps.get_asset.outputs.content_type }}
